Aim:
To simulate the Distance Vector Routing Algorithm and display the routing tables of all nodes until they converge.

Algorithm (Distance Vector Routing):
Each node maintains a routing table with the distance to every other node.

Initially, the distance to itself is 0, direct neighbors have known costs, and all others are set to infinity.

Nodes exchange routing tables with neighbors.

If a shorter path is found via a neighbor, the table is updated.

The process repeats until no changes occur in any routing table (convergence).

Java Program: DistanceVectorRouting.java
import java.util.Scanner;

public class DistanceVectorRouting {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        final int INF = 999;
        
        System.out.print("Enter number of routers: ");
        int n = sc.nextInt();
        
        int[][] cost = new int[n][n];
        int[][] distance = new int[n][n];
        int[][] nextHop = new int[n][n];

        System.out.println("Enter cost matrix (999 for infinity):");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                cost[i][j] = sc.nextInt();
                distance[i][j] = cost[i][j];
                nextHop[i][j] = j;
            }
        }

        boolean updated;
        do {
            updated = false;
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    for (int k = 0; k < n; k++) {
                        if (distance[i][j] > cost[i][k] + distance[k][j]) {
                            distance[i][j] = cost[i][k] + distance[k][j];
                            nextHop[i][j] = k;
                            updated = true;
                        }
                    }
                }
            }
        } while (updated);

        System.out.println("\nFinal Routing Tables:");
        for (int i = 0; i < n; i++) {
            System.out.println("Router " + i + ":");
            System.out.println("Destination\tNext Hop\tDistance");
            for (int j = 0; j < n; j++) {
                System.out.println(j + "\t\t" + nextHop[i][j] + "\t\t" + distance[i][j]);
            }
            System.out.println();
        }

        sc.close();
    }
}

input:
Enter number of routers: 3
Enter cost matrix:
0 2 7
2 0 1
7 1 0

output:
Final Routing Tables:
Router 0:
Destination	Next Hop	Distance
0		0		0
1		1		2
2		1		3

Router 1:
Destination	Next Hop	Distance
0		0		2
1		1		0
2		2		1

Router 2:
Destination	Next Hop	Distance
0		1		3
1		1		1
2		2		0
