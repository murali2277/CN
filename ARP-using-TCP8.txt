Aim:
To simulate the Address Resolution Protocol (ARP) using TCP sockets, where a client sends an IP address and the server responds with the corresponding MAC address.

Algorithm:
Server Side:

The server listens for incoming client requests over TCP.

It stores a list of IP-to-MAC mappings in a hash map.

On receiving a request (IP address), the server checks if it has the corresponding MAC address and sends it back to the client.

Client Side:

The client connects to the server and sends an IP address.

It waits for the serverâ€™s response, which will be the corresponding MAC address or an error message if not found.

Java Program: 
ARPServer.java (Server)
import java.io.*;
import java.net.*;
import java.util.*;

public class ARPServer {
    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(8080)) {
            System.out.println("ARP Server started, waiting for client connection...");
            
            // Predefined IP to MAC mappings
            Map<String, String> ipToMacMap = new HashMap<>();
            ipToMacMap.put("192.168.1.1", "00:14:22:01:23:45");
            ipToMacMap.put("192.168.1.2", "00:14:22:01:23:46");
            ipToMacMap.put("192.168.1.3", "00:14:22:01:23:47");

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Client connected...");
                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);

                // Receive IP address from the client
                String ipAddress = in.readLine();
                System.out.println("Received IP: " + ipAddress);

                // Look up the MAC address
                String macAddress = ipToMacMap.get(ipAddress);
                if (macAddress != null) {
                    out.println("MAC Address: " + macAddress);
                } else {
                    out.println("Error: IP address not found");
                }

                clientSocket.close();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

Java Program: 
ARPClient.java (Client)
import java.io.*;
import java.net.*;

public class ARPClient {
    public static void main(String[] args) {
        try (Socket socket = new Socket("localhost", 8080)) {
            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);

            // Get IP address from the user
            BufferedReader userInput = new BufferedReader(new InputStreamReader(System.in));
            System.out.print("Enter IP address to resolve: ");
            String ipAddress = userInput.readLine();

            // Send IP address to the server
            out.println(ipAddress);

            // Receive the MAC address or error message
            String response = in.readLine();
            System.out.println("Server Response: " + response);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}

Input Example (on the client side):
Enter IP address to resolve: 192.168.1.1

Output
Server Side (ARPServer.java) Output:
ARP Server started, waiting for client connection...
Client connected...
Received IP: 192.168.1.1

Client Side (ARPClient.java) Output:
Enter IP address to resolve: 192.168.1.1
Server Response: MAC Address: 00:14:22:01:23:45
